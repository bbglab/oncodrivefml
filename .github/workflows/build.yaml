name: Build and Publish

on:
  push:
    tags:
      - "**"
    branches:
      - "**"

permissions:
  contents: read

env:
  TERM: xterm
  PYTHON_VERSION: 3.11

jobs:
  packages-build:
    name: Build packages
    runs-on: ubuntu-latest
    env:
      RUFF_FORMAT: github

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Check format
        run: |
          make check-format || true
          BOLDRED=$(tput bold && tput setaf 1)
          RESET=$(tput sgr0)
          echo "${BOLDRED}==> We won't fail on formatting errors for the time being, but we will in the future.${RESET}"

      - name: Check lint
        run: |
          make check-lint || true
          BOLDRED=$(tput bold && tput setaf 1)
          RESET=$(tput sgr0)
          echo "${BOLDRED}==> We won't fail on lint errors for the time being, but we will in the future.${RESET}"

      - name: Build packages
        run: make build-dist

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist

  docker-build:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Check Dockerfile
        run: make check-docker

      - name: Build Docker image
        run: make build-image

      # TODO: Enable this when we figure out how to run it without having to download several Gigabytes of data.
      # - name: Test Docker image
      #   run: make run-example

  docs-build:
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Check version matching the tag
        shell: bash
        run: make docs

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/build

  check-version:
    name: Check version
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - packages-build
      - docker-build
      - docs-build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Check version matching the tag
        run: make check-version

  packages-publish:
    name: Publish packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - check-version

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Download packages
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: make publish-dist

  docker-push:
    name: Push Docker image
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - check-version

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare virtual environment
        run: make create-env

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: make docker-login

      - name: Push Docker image
        run: make push-image
